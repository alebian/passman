#!/usr/bin/env ruby

require 'colorize'
require 'passman'
require 'json'
require 'clipboard'
require 'highline'

DEFAULT_PATH = File.expand_path('~') + '/passman.json'

@cli = HighLine.new
@database_path = DEFAULT_PATH
@manager = nil

def main_menu(message, is_error)
  system 'clear'
  puts '--------------------------------------------------------------------------------'.colorize(:light_yellow)
  puts '|                                                                              |'.colorize(:light_yellow)
  puts '|                      _____              __  __                               |'.colorize(:light_yellow)
  puts '|                     |  __ \\            |  \\/  |                              |'.colorize(:light_yellow)
  puts '|                     | |__) |_ _ ___ ___| \\  / | __ _ _ __                    |'.colorize(:light_yellow)
  puts "|                     |  ___/ _` / __/ __| |\\/| |/ _` | '_ \\                   |".colorize(:light_yellow)
  puts '|                     | |  | (_| \\__ \\__ \\ |  | | (_| | | | |                  |'.colorize(:light_yellow)
  puts '|                     |_|   \\__,_|___/___/_|  |_|\\__,_|_| |_|                  |'.colorize(:light_yellow)
  puts '|                                                                              |'.colorize(:light_yellow)
  puts '|                    Welcome to PassMan, your password manager                 |'.colorize(:light_yellow)
  puts '|                                                                              |'.colorize(:light_yellow)
  puts '--------------------------------------------------------------------------------'.colorize(:light_yellow)
  unless message.nil?
    puts ''
    puts message.colorize(:red) + "\n\n" if is_error
    puts message.colorize(:green) + "\n\n" unless is_error
  end
  puts "Options:\n".colorize(:light_yellow)
  puts '  1) Get a previously saved password'
  puts '  2) Create a new password'
  puts '  3) Manage your saved passwords'
  puts "  4) Exit\n\n"
end

def load_manager
  return true unless @manager.nil?
  unless File.exist?(@database_path)
    puts "It appears that you don't have previously saved database."
    puts 'Would you like to create one or load a file stored somewhere else?'
    option = @cli.ask '[l/C] '

    case option
    when 'l'
      new_path = @cli.ask 'Where is your database located? '
      return false unless File.exist?(new_path)
      @database_path = new_path
    else
      file = File.new(@database_path, 'w+')
      file.write(JSON.generate({}))
      file.close
      print "\tcreated ".colorize(:green)
      puts @database_path
      puts "\nRemember to back up this file once in a while!\n\n".colorize(:light_yellow)
    end
  end
  @manager = Passman::Manager.new(@database_path)
end

def print_accounts(database)
  puts "You have this accounts in your database:\n\n"
  database.each do |account, info|
    puts account + ' -> ' + info['username']
  end
  puts ''
end

def clipboard_password_prompt(password)
  puts 'Would you like to see your password now or copy it to the clipboard?'
  copy = @cli.ask '[s/C] '
  case copy
  when 's'
    ["Your password is: #{password}", false]
  else
    Clipboard.copy(password)
    ['Password copied to clipboard!', false]
  end
end

def retreive_saved_password
  database = JSON.parse(File.read(@database_path)) if File.exist?(@database_path)
  return ['Failed to read database', true] if database.nil?
  return ['Empty database', false] if database.empty?
  print_accounts(database)
  account = @cli.ask "Which account's password would you like me to tell you? "
  puts "I'm going to need the secret passphrase you used when you stored it"
  key = @cli.ask('Enter your key:  ') { |q| q.echo = '*' }
  begin
    response = @manager.get(account, key)
    clipboard_password_prompt(response[1]['password'])
  rescue
    ['Wrong passphrase!', true]
  end
end

def create_password
  puts 'Good choice! Let me store your password'
  account = @cli.ask "Which account is this for? (Facebook, Google, etc)\n"
  username = @cli.ask "What is your username for this account?\n"
  puts 'Would you like me to create a secure password for you?'
  secure = @cli.ask '[n/Y] '
  password = nil
  case secure
  when 'n'
    puts 'What password would you like to use?'
    password = @cli.ask('Enter your password:   ') { |q| q.echo = '*' }
    password_confirmation = @cli.ask('Repeat your password:  ') { |q| q.echo = '*' }
    return ["Passwords don't match", true] if password != password_confirmation
  else
    puts 'The default password length is 32 characters, is this ok for you?'
    length = @cli.ask '[n/Y] '
    case length
    when 'n'
      length = @cli.ask 'How many characters would you like? '
      password = @manager.generate_password(length.to_i)
    else
      password = @manager.generate_password
    end
  end
  puts 'In order to save your password encrypted, I need a secret passphrase you can remember.'
  puts "Make it hard to guess and don't tell it to anyone!"
  key = @cli.ask('Enter your key:   ') { |q| q.echo = '*' }
  key_confirmation = @cli.ask('Repeat your key:  ') { |q| q.echo = '*' }
  return ["Keys don't match", true] if key != key_confirmation

  begin
    @manager.add(account, username, password, key)
    response = clipboard_password_prompt(password)
    ["Password stored successfully!\n#{response[0]}", false]
  rescue
    ['There was an error saving your password', true]
  end
end

def manage_passwords
  database = JSON.parse(File.read(@database_path)) if File.exist?(@database_path)
  return ['Failed to read database', true] if database.nil?
  return ['Empty database', false] if database.empty?
  print_accounts(database)
  account = @cli.ask 'Which account would you like to delete? '
  begin
    @manager.delete(account)
    ["#{account} account deleted", false]
  rescue
    ['Invalid account', true]
  end
end

@execute = true
message = nil
is_error = false
while @execute
  main_menu(message, is_error)
  option = @cli.ask('What would you like to do?')
  puts ''
  case option
  when '1'
    # Get password
    if load_manager
      message, is_error = retreive_saved_password
    else
      message = 'Database not found'
      is_error = true
    end

  when '2'
    # Create password
    if load_manager
      message, is_error = create_password
    else
      message = 'Database not found'
      is_error = true
    end

  when '3'
    # Manage passwords
    if load_manager
      message, is_error = manage_passwords
    else
      message = 'Database not found'
      is_error = true
    end

  when '4'
    # Exit
    @execute = false
  else
    message = nil
    is_error = false
  end
end
